package util;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.websocket.OnClose;
import javax.websocket.OnError;
import javax.websocket.OnOpen;
import javax.websocket.Session;
import javax.websocket.server.ServerEndpoint;

//该注解用来指定一个url
@ServerEndpoint("/websocket")
public class MyWebSocket {

	// Set，用来存放每个客户端对应的MyWebSocket对象。若要实现服务端与单一客户端通信的话，可以使用Map来存放，其中Key可以为用户标识
	public static Set<MyWebSocket> set = new HashSet<MyWebSocket>();

	// 与某个客户端的连接会话，需要通过它来给客户端发送数据
	private Session session;

	/**
	 * 连接建立成功调用的方法
	 * 
	 * @param session
	 *            可选的参数。session为与某个客户端的连接会话，需要通过它来给客户端发送数据
	 */
	@OnOpen
	public void onOpen(Session session) {
		this.session = session;
		set.add(this); // 加入set中
		Date date = new Date();
		SimpleDateFormat format = new SimpleDateFormat("yyyy.MM.dd HH:mm:ss");
		System.out.println(format.format(date)+" 有新连接加入！");
	}

	/**
	 * 连接关闭调用的方法
	 */
	@OnClose
	public void onClose() {
		Date date = new Date();
		SimpleDateFormat format = new SimpleDateFormat("yyyy.MM.dd HH:mm:ss");
		set.remove(this); // 从set中删除
		System.out.println(format.format(date)+" 有一连接关闭！");
	}

	/**
	 * 发生错误时调用
	 * 
	 * @param session
	 * @param error
	 */
	@OnError
	public void onError(Session session, Throwable error) {
		System.out.println("发生错误");
		error.printStackTrace();
	}

	public static void sendMessageAll(String message1, String message2) {
		for (MyWebSocket item : set) {
			item.sendMessage(message1, message2);
		}
	}

	public void sendMessage(String message1, String message2) {
		try {
			session.getBasicRemote().sendText(message1);
			session.getBasicRemote().sendText(message2);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
